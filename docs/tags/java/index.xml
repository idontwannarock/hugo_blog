<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Wang&#39;s Blog</title>
    <link>https://idontwannarock.github.io/hugo_blog/tags/java/</link>
    <description>Recent content in Java on Wang&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Apr 2018 13:22:52 +0800</lastBuildDate>
    
	<atom:link href="https://idontwannarock.github.io/hugo_blog/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AOP及Spring AOP簡述</title>
      <link>https://idontwannarock.github.io/hugo_blog/2018/04/aop%E5%8F%8Aspring-aop%E7%B0%A1%E8%BF%B0/</link>
      <pubDate>Tue, 10 Apr 2018 13:22:52 +0800</pubDate>
      
      <guid>https://idontwannarock.github.io/hugo_blog/2018/04/aop%E5%8F%8Aspring-aop%E7%B0%A1%E8%BF%B0/</guid>
      <description>簡述  AOP(Aspect-Oriented Programming) 是一種基於 OOP(Object-Oriented Programming) 的改進 AOP 是基於動態代理 (Dynamic Proxy) 這種 design pattern AOP 主要的設計對象是切面 (Aspect)，而切面是用來模組化橫切關注點 (Cross-Cutting Concern) 切面需要定義公共功能，但可以明確定義功能在哪裡或以什麼方式應用，而不必修改受影響的類別。如此切面關注點就可以被模組化到特殊的類別 (切面) 裡面  優點  交易相關的邏輯位於同一位置，便於維護與升級 業務邏輯更簡潔，只包含核心業務代碼  AOP術語及概念  Cross-Cutting Concern 橫切關注點：橫跨應用系統多個流程、模組的功能，例如日誌 (Logging)、安全 (Security) 檢查、交易 (Transaction) 等動作，在許多流程的多個位置都需要執行，這種動作就被稱為橫切關注點 Aspect 切面：橫切關注點被模組化後的一種特殊物件；還未模組化前是橫切關注點，抽取後成為一組一組的切面；另一方面來說代理會將一個一個切面重組為橫切關注點 Advice 通知：切面必須要完成的工作或行為，也就是切面的實作內容。切面裡面的各個方法即是一個、一個的通知 Target 目標：被通知的物件，也就是要被橫切的業務邏輯類別 Proxy 代理：向目標物件通知之後創建的對象。容器會建立一個代理，依照設定去縫合 (weave) 切面到應用程式中 JoinPoint 連接點：程序執行的某個特定位置或時機。例如某個類別的某個方法呼叫前、呼叫後、拋出異常後等等。  連接點由兩個因素決定：以方法表示的程式執行點、相對執行點表示的方位。例如 A 類別的 a() 方法執行前的 JoinPoint 連接點決定要素為：執行點 A#a()，方位為執行前的位置 概念類比：JoinPoint 連接點相當於資料庫的紀錄，切面相當於查詢條件  Pointcut 切面定義：每個類別都有多個連接點，類別的所有方法某種程度上都可以想成是 JoinPoint 連接點。AOP通過切面定位到特定的連接點  Spring AOP 簡述  AspectJ：Java 社群最完整、最廣為人知的 AOP 實作 Spring 2.</description>
    </item>
    
    <item>
      <title>Java字串判定(1) - 空字串 vs null</title>
      <link>https://idontwannarock.github.io/hugo_blog/2018/02/java%E5%AD%97%E4%B8%B2%E5%88%A4%E5%AE%9A1-%E7%A9%BA%E5%AD%97%E4%B8%B2-vs-null/</link>
      <pubDate>Tue, 06 Feb 2018 14:09:25 +0800</pubDate>
      
      <guid>https://idontwannarock.github.io/hugo_blog/2018/02/java%E5%AD%97%E4%B8%B2%E5%88%A4%E5%AE%9A1-%E7%A9%BA%E5%AD%97%E4%B8%B2-vs-null/</guid>
      <description>前言 因為開始做專題，開始要作資料檢查，首先會要碰到的就是最基本的檢查是否有輸入資料，也就是要檢查字串，記錄一下Java當中有關字串檢查的東西。
去除字串空白 這主要分兩個部分，一是去掉頭尾空白，一是去掉字串中間空白。
去掉頭尾空白就用.trim()，去掉字串中間空白則可以用.replaceAll(&amp;quot; &amp;quot;, &amp;quot;&amp;quot;)的方式簡單完成。
但用replaceAll()方法有個小小的問題，就是萬一碰到的是空白字元，例如\t、\r這種就會有困難，所以必須要用正規表示式來去除，例如：
String str = &amp;quot;\t&amp;quot;; str.replaceAll(&amp;quot;\\s+&amp;quot;, &amp;quot;&amp;quot;);  檢查空值 接著如果要檢查字串是否有東西，要分成檢查兩種狀態，null或空字串。
這邊有幾個方法檢查這個部分，但要注意它們實際功能上的區別。
.length == 0 這個是Java最原始的功能，基本上就是檢查字串長度是否為0，回傳值型態為boolean。
.isEmpty() 這個方法是Java 6.0之後推出用來取代.length() == 0的方法。isEmpty()其實也是在檢查字串長度是否為0，回傳值型態一樣為boolean。
.equals(&amp;quot;&amp;quot;) 這個功能是用字串的比對功能，比對是否為空字串，結果應該會跟前兩個方法相同。
!= null 前面幾個方法都有一個共同的問題：萬一字串為null，全都來不及檢查就會跳NullPointerException。
所以必須要用這個方式檢查是否為Null，再檢查是否為空字串，也就是要寫成類似下面這樣：
String string; if (string != null &amp;amp;&amp;amp; string.isEmpty()) { // things to do when string is neither null nor blank; }  &amp;quot;&amp;quot;.equals(string) 但有一個更簡短的方法&amp;quot;&amp;quot;.equals(string)。
因為用String本身的.equals()方法，會先檢查括號內參數字串是否為null，若是null就會直接回傳false；若參數字串不為null，才會繼續檢查是否跟&amp;quot;&amp;quot;空字串相等。
所以前一段的檢查式就可以縮短如下：
String string; if (!&amp;quot;&amp;quot;.equals(string)) { // things to do when string is neither null nor blank; }  結語 雖然最後一個方法最簡短，但其實可讀性不見得比較優秀；而倒數第二個方法雖然比較囉唆，但整體上可讀性比較好。</description>
    </item>
    
    <item>
      <title>Java樂透抽取算法初探</title>
      <link>https://idontwannarock.github.io/hugo_blog/2017/11/java%E6%A8%82%E9%80%8F%E6%8A%BD%E5%8F%96%E7%AE%97%E6%B3%95%E5%88%9D%E6%8E%A2/</link>
      <pubDate>Wed, 15 Nov 2017 14:26:17 +0800</pubDate>
      
      <guid>https://idontwannarock.github.io/hugo_blog/2017/11/java%E6%A8%82%E9%80%8F%E6%8A%BD%E5%8F%96%E7%AE%97%E6%B3%95%E5%88%9D%E6%8E%A2/</guid>
      <description>前言 因為做到這個經典練習演算法的題目，雖然是非常入門級的，也是讓我想了很久，覺得都做了這麼久，不記錄下來也是蠻可惜。
題目 請隨機從正整數 1-42當中隨機抽出 6個數字，不用排序，但不可重複。
解法 樂透這個題目主要可以練習的有三個地方，隨機、迴圈，還有就是如何確保數字不重複。
  以 Java來說，隨機就是使用java.lang.Math類別裡的靜態方法random()，但要注意Math.random()之後產生的是大於等於 0、小於 1，也就是0 &amp;lt;= Math.random() &amp;lt; 1的double型態浮點常數。 因此，以這題來說，還要記得利用(int)轉換型態成整數型態的常數。 另外，若不放心浮點數轉換為整數後的值，可以利用一樣是Math類別裡的靜態方法floor()或ceiling()來取無條件進位或無條件捨去後的整數值 而要設定亂數範圍，公式為Math.random() * 範圍個數 + 初值   然後因為已經確定要抽出的數目，所以可以使用元素個數不能變動的陣列，當然也可以用可以變動個數的Collection或其子介面去解決。關鍵就在於不可重複。
這篇只討論陣列的解法。
暴力解：重複檢查 最簡單的寫法肯定就是暴力解：每抽出一個數字就存到結果陣列，然後每抽一次，就跟陣列裡每個數字都比對一次，一有重複就重抽。
// 設定存儲樂透數字陣列 int[] randomArray = new int[6]; // 執行抽取樂透數字的動作 6次 for (int i = 0; i &amp;lt; randomArray.length; i++) { // 先將亂數出來的數字存入陣列第 i個位置 randomArray[i] = (int)(Math.random() * 42) + 1; // 接著執行檢查迴圈 for (int j = 0; j &amp;lt; i; j++) { // 輪流跟陣列中目前存在的其他元素比對 if (randomArray[i] == randomArray[j]) { // 如果有找到重複數字，就將計數器 i減 1，然後重抽 i--; // 注意這邊 break是跳出 if外面一層的 for迴圈 break; } } } // 印出樂透數字陣列中的數字，列印陣列也要用迴圈，這邊是用新版寫法 for (int num : randomArray) { System.</description>
    </item>
    
  </channel>
</rss>