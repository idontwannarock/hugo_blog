<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PHP on Wang&#39;s Blog</title>
    <link>https://idontwannarock.github.io/hugo_blog/tags/php/</link>
    <description>Recent content in PHP on Wang&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Sep 2017 10:27:28 +0800</lastBuildDate>
    
	<atom:link href="https://idontwannarock.github.io/hugo_blog/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>4th Practice: Twitter Clone</title>
      <link>https://idontwannarock.github.io/hugo_blog/2017/09/4th-practice-twitter-clone/</link>
      <pubDate>Fri, 15 Sep 2017 10:27:28 +0800</pubDate>
      
      <guid>https://idontwannarock.github.io/hugo_blog/2017/09/4th-practice-twitter-clone/</guid>
      <description>第四個目標 練習 PHP, MySQL跟 MVC，因為 Bootstrap很方便所以 HTML跟 CSS就這樣吧廠廠~
作品：史上最簡陋Twitter
參考：這參考太多了，只能說各種參考orz
原始碼：可以參考我的Github
還是要先講一下，這並不是我憑空寫出來的作品，是跟著 Udemy網路課程教學作出來的。
遇到困難 1. 對自己智商產生質疑 真的是這樣，之所以這麼廢的東西還能作這麼久，事後檢討的結果，絕大多數時間都浪費在因為智商太低產生的各種製造障礙，簡稱製障問題上。
譬如說出現什麼 404或 500錯誤訊息，花了三個多小時觀看 stackoverflow上高手討論，最後發現是 PHP某一行少加了一個;，當天直接氣到作不下去之類的…
2. debug 作這個真心受教了，要馬每一步都先作測試，要馬就要會查 bug，人生就是要接受 bug的出現，沒 bug絕對是陰德值爆滿。
所以我目前領悟到的順序是：
  先查 code有沒有漏加什麼;或,或者哪裡括號沒關好，這些出現的頻率超乎你想像，即使有 autocomplete功能也是一樣。 再來用 Chrome的Inspect或 Firefox的Inspector來查錯誤訊息，運氣好就會跟你說你程式碼哪一行有問題。 還找不到，先不要急著 google，先查 Log！先查 Log！先查 Log！很重要，所以講三次。通常 Log也會跟你講執行到哪一行有問題。 最後真的都不行，再拿錯誤訊息去拜 google大神   以上是我的切身之痛，其他的難點在這兩個困難底下，都已經不再重要…喔不是啦，還是補充一個。
3. AJAX 不太確定這算不算常識，但大家在使用 jQuery+AJAX的時候要注意 jQuery的版本，請不要用到 slim版的喔， jQuery slim版把 AJAX功能拿掉了，所以最起碼要用 minified或更完整的版本，切記切記！
尤其在套 Bootstrap 4的模板的時候要注意，官方預設是載入 slim版本的 jQuery，要記得自己去改 cdn。</description>
    </item>
    
    <item>
      <title>實作簡單登入會員系統(1)</title>
      <link>https://idontwannarock.github.io/hugo_blog/2017/09/login-signup-function/</link>
      <pubDate>Mon, 11 Sep 2017 07:11:59 +0800</pubDate>
      
      <guid>https://idontwannarock.github.io/hugo_blog/2017/09/login-signup-function/</guid>
      <description>學習目標  實作簡單會員系統，有加入會員、登入、登出 cookie 防範 SQL Injection+XSS hash密碼  學習內容 構思 坦白說，我有自學過一點點前後端的 Udemy網路課程，所以前端的部分，簡單的 HTML, CSS, Javascript, jQuery我還可以，大概是不會寫也可以谷哥看別人怎麼寫的程度。後端也是學過簡單的 PHP跟 MySQL這樣。所以後面的說明很可能會省略很多基礎，而只記錄我不太會或不太熟的部分。
關於會員系統，Udemy課程的老師其實有教過這個部分，但當時似懂非懂，幾乎就是 copy老師的程式碼，糊里糊塗就寫出來，PHP跟 MySQL的部分一片模糊，所以先來嘗試自己重新寫一遍，不行再來找找看網路教學。
要寫登入登出的功能，我第一個想到就是要用 HTML的form先做三個input跟一個button，若要串接資料庫，應該還要再作一個button切換 Sign Up跟 Login畫面來作區別。預計應該要用 jQuery控制切換 Sign Up/Login的功能。
然後後端邏輯應該就是先作 Sign Up/Login資料的驗證部分，用ajax傳輸資料到後端，檢查輸入的username、email跟password是否空白、格式是否正確以及是否重複，用echo輸出錯誤提示訊息給前端。
接著作 Sign Up部分，接著剛剛驗證完資料正確後，檢查資料庫有無重複資料後，再把username、email跟password存進資料庫。
最後再作 Login部分，先用使用者輸入的username比對資料庫有無紀錄，再比對password，最後輸出 Login成功訊息。這邊會感覺會需要了解$_SESSION跟$_COOKIE怎麼運作，因為要幫 Sign Up/Login成功的使用者加上$_SESSION或$_COOKIE。
接著作 SQL Injection及 XSS攻擊的防範。最後再將使用者 Sign Up時輸入的password作 hash處理。
另外以下是以只架站在自己 Windows電腦的 XAMPP上為前提，XAMPP架站簡單教學可以看我之前寫的這篇筆記：XAMPP安裝設定及簡單 PHP練習。
還有就是如果想要讓自己寫完的作品可以讓別人看到，可能要自己先想辦法查做法，我自己都還搞不太清楚。（攤手）
版面設定 所以就從寫個form、三個input跟兩個按鈕開始好了。我猶豫了一下要不要用 Bootstrap，還是用好了，畢竟練習的重點在後端，畫面就直接套用現成的版就好。
所以直接就貼上 Bootstrap 4的Starter template，因為後面要用ajax，所以 jQeury的版本記得從 slim換成最起碼 min的版本。然後直接用 Bootstrap的Forms作模板。
切換功能 接下來就是複習 jQuery語法的時候，因為這邊用到的功能不難所以不多講。大概方向就是在click動作上建立一個判斷式，判斷目前是 Login轉 Sign Up要做什麼事；Sign Up轉 Login要做什麼事。這部分的script我是寫在body的最後。</description>
    </item>
    
    <item>
      <title>XAMPP安裝設定及簡單 PHP練習</title>
      <link>https://idontwannarock.github.io/hugo_blog/2017/09/xampp-setup-1/</link>
      <pubDate>Sun, 10 Sep 2017 07:39:23 +0800</pubDate>
      
      <guid>https://idontwannarock.github.io/hugo_blog/2017/09/xampp-setup-1/</guid>
      <description>源起 之前提到的胡立大大在 Slack群組裡發布了他擬的教學實驗計畫大綱，大概分為以下四段：
 網頁後端相關（Session, Database, Server）
 網頁前端相關（HTML, JavaScript, CSS, jQuery）
 程式解題相關（帶大家做一些 ACM 一二星題或是基本演算法資料結構）
 資訊安全相關（SQL Injection, CSRF, XSS）
  裡面還有一堆細項，總之就從頭開始練習，第一項就是「在自己的電腦上成功運行 PHP」，還有給提示可以用 XAMPP架環境，然後用 PHP寫 hello world，那就來試試看吧。
學習目標 學習用 XAMPP建構環境，並用 PHP寫一句 hello world。
學習內容 什麼是 XAMPP XAMPP官網的解釋是一個 PHP開發環境，是一個 Apache的發行版本，包含了 MariaDB、PHP和 Perl。
完全看不懂，先來查一下名詞。
PHP我大概知道，是一種後端的語言，理論上可以配合各種 SQL語言跟資料庫作溝通，然後再跟前端連結作輸出。至於 PHP到底算不算程式語言這種問題就跳過。
Apache則是久聞其名但不知其詳。谷哥上的資料看起來是一種網頁伺服器，但伺服器是什麼？我沒念過計概，我也不知道計概教不教這個，總之就是沒概念，只好再查。
運氣很好，又找到這篇[WDC] 淺談 Web Server 及 Application Server （上），終於有點概念，這邊說的 server就是提供 web服務的伺服器，而不是實體的機器。所以 Apache就是提供 web功能的伺服器程式。依照這個脈絡，所謂的 PHP開發環境，應該是 XAMPP提供可以運行 PHP功能的 Apache伺服器環境，也包括可以運行 MariaDB跟 Perl。
這樣看來，XAMPP應該就是類似一個打包的軟體，一次幫你安裝設定好可以運行 Apache、PHP、MariaDB及 Perl的伺服器環境，把個人電腦當伺服器跟資料庫來使用。</description>
    </item>
    
  </channel>
</rss>